{"ast":null,"code":"const express = require(\"express\");\nconst sqlite3 = require(\"sqlite3\").verbose();\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst path = require(\"path\");\nconst app = express();\nconst port = 5000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// SQLite 데이터베이스 파일 경로\nconst dbPath = path.resolve(__dirname, \"zzipfood.db\");\n\n// SQLite 데이터베이스 연결\nconst db = new sqlite3.Database(dbPath, err => {\n  if (err) {\n    console.error(\"Error opening database\", err);\n  } else {\n    // 데이터베이스 초기화\n    db.serialize(() => {\n      db.run(\"DROP TABLE IF EXISTS foods\");\n      db.run(\"DROP TABLE IF EXISTS ingredients\");\n      db.run(`CREATE TABLE IF NOT EXISTS foods (\n        name TEXT,\n        restaurantName TEXT,\n        restaurantPrice INTEGER,\n        ingredientCost INTEGER,\n        recipe TEXT,\n        ingredients TEXT\n      )`);\n      db.run(`CREATE TABLE IF NOT EXISTS ingredients (\n        name TEXT,\n        price INTEGER\n      )`);\n\n      // 초기 데이터 삽입\n      db.get(\"SELECT COUNT(*) AS count FROM foods\", (err, row) => {\n        if (err) {\n          console.error(\"Error checking foods table\", err);\n        } else if (row.count === 0) {\n          const stmt = db.prepare(\"INSERT INTO foods (name, restaurantName, restaurantPrice, ingredientCost, recipe, ingredients) VALUES (?, ?, ?, ?, ?, ?)\");\n          // 김치찌개\n          stmt.run(\"김치찌개\", \"한식당\", 8000, 5000, \"1. 김치 준비\\n2. 돼지고기와 함께 끓이기\\n3. 완성!\", \"김치, 돼지고기, 두부, 양파, 대파, 고춧가루\");\n          stmt.run(\"김치찌개\", \"맛있는 집\", 8500, 5000, \"1. 김치 준비\\n2. 돼지고기와 함께 끓이기\\n3. 완성!\", \"김치, 돼지고기, 두부, 양파, 대파, 고춧가루\");\n          stmt.run(\"김치찌개\", \"정겨운 식당\", 9000, 5000, \"1. 김치 준비\\n2. 돼지고기와 함께 끓이기\\n3. 완성!\", \"김치, 돼지고기, 두부, 양파, 대파, 고춧가루\");\n\n          // 된장찌개\n          stmt.run(\"된장찌개\", \"한식당\", 7000, 4000, \"1. 된장 준비\\n2. 야채와 함께 끓이기\\n3. 완성!\", \"된장, 두부, 애호박, 고추\");\n          stmt.run(\"된장찌개\", \"맛있는 집\", 7500, 4000, \"1. 된장 준비\\n2. 야채와 함께 끓이기\\n3. 완성!\", \"된장, 두부, 애호박, 고추\");\n          stmt.run(\"된장찌개\", \"정겨운 식당\", 8000, 4000, \"1. 된장 준비\\n2. 야채와 함께 끓이기\\n3. 완성!\", \"된장, 두부, 애호박, 고추\");\n\n          // 비빔밥\n          stmt.run(\"비빔밥\", \"한식당\", 9000, 6000, \"1. 밥 준비\\n2. 야채와 고기와 함께 비비기\\n3. 고추장 넣기\\n4. 완성!\", \"밥, 고추장, 소고기, 시금치, 당근, 콩나물, 계란\");\n          stmt.run(\"비빔밥\", \"맛있는 집\", 9500, 6000, \"1. 밥 준비\\n2. 야채와 고기와 함께 비비기\\n3. 고추장 넣기\\n4. 완성!\", \"밥, 고추장, 소고기, 시금치, 당근, 콩나물, 계란\");\n          stmt.run(\"비빔밥\", \"정겨운 식당\", 10000, 6000, \"1. 밥 준비\\n2. 야채와 고기와 함께 비비기\\n3. 고추장 넣기\\n4. 완성!\", \"밥, 고추장, 소고기, 시금치, 당근, 콩나물, 계란\");\n\n          // 불고기\n          stmt.run(\"불고기\", \"고기집\", 12000, 7000, \"1. 소고기 양념하기\\n2. 야채와 함께 볶기\\n3. 완성!\", \"소고기, 양파, 당근, 대파, 마늘, 간장, 설탕\");\n          stmt.run(\"불고기\", \"맛있는 집\", 12500, 7000, \"1. 소고기 양념하기\\n2. 야채와 함께 볶기\\n3. 완성!\", \"소고기, 양파, 당근, 대파, 마늘, 간장, 설탕\");\n          stmt.run(\"불고기\", \"정겨운 식당\", 13000, 7000, \"1. 소고기 양념하기\\n2. 야채와 함께 볶기\\n3. 완성!\", \"소고기, 양파, 당근, 대파, 마늘, 간장, 설탕\");\n\n          // 김밥\n          stmt.run(\"김밥\", \"분식집\", 5000, 3000, \"1. 김밥 재료 준비\\n2. 밥과 재료를 김에 말기\\n3. 완성!\", \"김, 밥, 단무지, 시금치, 당근, 햄, 계란\");\n          stmt.run(\"김밥\", \"맛있는 집\", 5500, 3000, \"1. 김밥 재료 준비\\n2. 밥과 재료를 김에 말기\\n3. 완성!\", \"김, 밥, 단무지, 시금치, 당근, 햄, 계란\");\n          stmt.run(\"김밥\", \"정겨운 식당\", 6000, 3000, \"1. 김밥 재료 준비\\n2. 밥과 재료를 김에 말기\\n3. 완성!\", \"김, 밥, 단무지, 시금치, 당근, 햄, 계란\");\n\n          // 잡채\n          stmt.run(\"잡채\", \"한식당\", 10000, 6000, \"1. 당면 삶기\\n2. 고기와 야채 볶기\\n3. 당면과 함께 볶기\\n4. 완성!\", \"당면, 소고기, 시금치, 당근, 양파, 대파, 간장, 설탕\");\n          stmt.run(\"잡채\", \"맛있는 집\", 10500, 6000, \"1. 당면 삶기\\n2. 고기와 야채 볶기\\n3. 당면과 함께 볶기\\n4. 완성!\", \"당면, 소고기, 시금치, 당근, 양파, 대파, 간장, 설탕\");\n          stmt.run(\"잡채\", \"정겨운 식당\", 11000, 6000, \"1. 당면 삶기\\n2. 고기와 야채 볶기\\n3. 당면과 함께 볶기\\n4. 완성!\", \"당면, 소고기, 시금치, 당근, 양파, 대파, 간장, 설탕\");\n          stmt.finalize();\n        }\n      });\n      db.get(\"SELECT COUNT(*) AS count FROM ingredients\", (err, row) => {\n        if (err) {\n          console.error(\"Error checking ingredients table\", err);\n        } else if (row.count === 0) {\n          const stmt = db.prepare(\"INSERT INTO ingredients (name, price) VALUES (?, ?)\");\n          stmt.run(\"김치\", 2000);\n          stmt.run(\"돼지고기\", 3000);\n          stmt.run(\"두부\", 1000);\n          stmt.run(\"양파\", 500);\n          stmt.run(\"대파\", 500);\n          stmt.run(\"고춧가루\", 1000);\n          stmt.run(\"된장\", 1500);\n          stmt.run(\"애호박\", 1000);\n          stmt.run(\"고추\", 500);\n          stmt.run(\"밥\", 1000);\n          stmt.run(\"고추장\", 500);\n          stmt.run(\"소고기\", 4000);\n          stmt.run(\"시금치\", 500);\n          stmt.run(\"당근\", 300);\n          stmt.run(\"콩나물\", 300);\n          stmt.run(\"계란\", 500);\n          stmt.run(\"마늘\", 200);\n          stmt.run(\"간장\", 200);\n          stmt.run(\"설탕\", 100);\n          stmt.run(\"김\", 500);\n          stmt.run(\"단무지\", 300);\n          stmt.run(\"햄\", 500);\n          stmt.run(\"당면\", 1500);\n          stmt.finalize();\n        }\n      });\n    });\n  }\n});\n\n// API 엔드포인트\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello, world!\");\n});\n\n// 음식 검색 API\napp.get(\"/api/foods/:name\", (req, res) => {\n  const name = req.params.name;\n  db.all(\"SELECT * FROM foods WHERE name = ?\", [name], (err, rows) => {\n    if (err) {\n      res.status(500).send(\"Error fetching food\");\n    } else if (rows.length === 0) {\n      res.status(404).send(\"Food not found\");\n    } else {\n      res.send(rows);\n    }\n  });\n});\n\n// 재료 가격 API\napp.get(\"/api/ingredient-prices/:name\", (req, res) => {\n  const name = req.params.name;\n  db.get(\"SELECT ingredients FROM foods WHERE name = ?\", [name], (err, row) => {\n    if (err) {\n      res.status(500).send(\"Error fetching ingredients\");\n    } else if (!row) {\n      res.status(404).send(\"Food not found\");\n    } else {\n      const ingredients = row.ingredients.split(\", \");\n      const prices = {};\n      let totalCost = 0;\n      db.all(\"SELECT name, price FROM ingredients WHERE name IN (\" + ingredients.map(() => \"?\").join(\",\") + \")\", ingredients, (err, rows) => {\n        if (err) {\n          res.status(500).send(\"Error fetching ingredient prices\");\n        } else {\n          rows.forEach(ingredient => {\n            prices[ingredient.name] = ingredient.price;\n            totalCost += ingredient.price;\n          });\n          res.send({\n            prices,\n            totalCost\n          });\n        }\n      });\n    }\n  });\n});\n\n// 냉장고 재료 API\napp.get(\"/api/ingredients\", (req, res) => {\n  db.all(\"SELECT * FROM ingredients ORDER BY name ASC\", [], (err, rows) => {\n    if (err) {\n      res.status(500).send(\"Error fetching ingredients\");\n    } else {\n      res.send(rows);\n    }\n  });\n});\napp.post(\"/api/ingredients\", (req, res) => {\n  const {\n    name,\n    price\n  } = req.body;\n  db.run(\"INSERT INTO ingredients (name, price) VALUES (?, ?)\", [name, price], function (err) {\n    if (err) {\n      res.status(500).send(\"Error adding ingredient\");\n    } else {\n      res.send({\n        id: this.lastID\n      });\n    }\n  });\n});\n\n// 서버 시작\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","sqlite3","verbose","cors","bodyParser","path","app","port","use","json","dbPath","resolve","__dirname","db","Database","err","console","error","serialize","run","get","row","count","stmt","prepare","finalize","req","res","send","name","params","all","rows","status","length","ingredients","split","prices","totalCost","map","join","forEach","ingredient","price","post","body","id","lastID","listen","log"],"sources":["C:/Users/csgae/Documents/GitHub/2024-01-CSC4004-03-Trogrammer/zzipfood/frontend/src/pages/FoodSearchPage.js"],"sourcesContent":["const express = require(\"express\");\r\nconst sqlite3 = require(\"sqlite3\").verbose();\r\nconst cors = require(\"cors\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst path = require(\"path\");\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// SQLite 데이터베이스 파일 경로\r\nconst dbPath = path.resolve(__dirname, \"zzipfood.db\");\r\n\r\n// SQLite 데이터베이스 연결\r\nconst db = new sqlite3.Database(dbPath, (err) => {\r\n  if (err) {\r\n    console.error(\"Error opening database\", err);\r\n  } else {\r\n    // 데이터베이스 초기화\r\n    db.serialize(() => {\r\n      db.run(\"DROP TABLE IF EXISTS foods\");\r\n      db.run(\"DROP TABLE IF EXISTS ingredients\");\r\n\r\n      db.run(`CREATE TABLE IF NOT EXISTS foods (\r\n        name TEXT,\r\n        restaurantName TEXT,\r\n        restaurantPrice INTEGER,\r\n        ingredientCost INTEGER,\r\n        recipe TEXT,\r\n        ingredients TEXT\r\n      )`);\r\n\r\n      db.run(`CREATE TABLE IF NOT EXISTS ingredients (\r\n        name TEXT,\r\n        price INTEGER\r\n      )`);\r\n\r\n      // 초기 데이터 삽입\r\n      db.get(\"SELECT COUNT(*) AS count FROM foods\", (err, row) => {\r\n        if (err) {\r\n          console.error(\"Error checking foods table\", err);\r\n        } else if (row.count === 0) {\r\n          const stmt = db.prepare(\r\n            \"INSERT INTO foods (name, restaurantName, restaurantPrice, ingredientCost, recipe, ingredients) VALUES (?, ?, ?, ?, ?, ?)\"\r\n          );\r\n          // 김치찌개\r\n          stmt.run(\r\n            \"김치찌개\",\r\n            \"한식당\",\r\n            8000,\r\n            5000,\r\n            \"1. 김치 준비\\n2. 돼지고기와 함께 끓이기\\n3. 완성!\",\r\n            \"김치, 돼지고기, 두부, 양파, 대파, 고춧가루\"\r\n          );\r\n          stmt.run(\r\n            \"김치찌개\",\r\n            \"맛있는 집\",\r\n            8500,\r\n            5000,\r\n            \"1. 김치 준비\\n2. 돼지고기와 함께 끓이기\\n3. 완성!\",\r\n            \"김치, 돼지고기, 두부, 양파, 대파, 고춧가루\"\r\n          );\r\n          stmt.run(\r\n            \"김치찌개\",\r\n            \"정겨운 식당\",\r\n            9000,\r\n            5000,\r\n            \"1. 김치 준비\\n2. 돼지고기와 함께 끓이기\\n3. 완성!\",\r\n            \"김치, 돼지고기, 두부, 양파, 대파, 고춧가루\"\r\n          );\r\n\r\n          // 된장찌개\r\n          stmt.run(\r\n            \"된장찌개\",\r\n            \"한식당\",\r\n            7000,\r\n            4000,\r\n            \"1. 된장 준비\\n2. 야채와 함께 끓이기\\n3. 완성!\",\r\n            \"된장, 두부, 애호박, 고추\"\r\n          );\r\n          stmt.run(\r\n            \"된장찌개\",\r\n            \"맛있는 집\",\r\n            7500,\r\n            4000,\r\n            \"1. 된장 준비\\n2. 야채와 함께 끓이기\\n3. 완성!\",\r\n            \"된장, 두부, 애호박, 고추\"\r\n          );\r\n          stmt.run(\r\n            \"된장찌개\",\r\n            \"정겨운 식당\",\r\n            8000,\r\n            4000,\r\n            \"1. 된장 준비\\n2. 야채와 함께 끓이기\\n3. 완성!\",\r\n            \"된장, 두부, 애호박, 고추\"\r\n          );\r\n\r\n          // 비빔밥\r\n          stmt.run(\r\n            \"비빔밥\",\r\n            \"한식당\",\r\n            9000,\r\n            6000,\r\n            \"1. 밥 준비\\n2. 야채와 고기와 함께 비비기\\n3. 고추장 넣기\\n4. 완성!\",\r\n            \"밥, 고추장, 소고기, 시금치, 당근, 콩나물, 계란\"\r\n          );\r\n          stmt.run(\r\n            \"비빔밥\",\r\n            \"맛있는 집\",\r\n            9500,\r\n            6000,\r\n            \"1. 밥 준비\\n2. 야채와 고기와 함께 비비기\\n3. 고추장 넣기\\n4. 완성!\",\r\n            \"밥, 고추장, 소고기, 시금치, 당근, 콩나물, 계란\"\r\n          );\r\n          stmt.run(\r\n            \"비빔밥\",\r\n            \"정겨운 식당\",\r\n            10000,\r\n            6000,\r\n            \"1. 밥 준비\\n2. 야채와 고기와 함께 비비기\\n3. 고추장 넣기\\n4. 완성!\",\r\n            \"밥, 고추장, 소고기, 시금치, 당근, 콩나물, 계란\"\r\n          );\r\n\r\n          // 불고기\r\n          stmt.run(\r\n            \"불고기\",\r\n            \"고기집\",\r\n            12000,\r\n            7000,\r\n            \"1. 소고기 양념하기\\n2. 야채와 함께 볶기\\n3. 완성!\",\r\n            \"소고기, 양파, 당근, 대파, 마늘, 간장, 설탕\"\r\n          );\r\n          stmt.run(\r\n            \"불고기\",\r\n            \"맛있는 집\",\r\n            12500,\r\n            7000,\r\n            \"1. 소고기 양념하기\\n2. 야채와 함께 볶기\\n3. 완성!\",\r\n            \"소고기, 양파, 당근, 대파, 마늘, 간장, 설탕\"\r\n          );\r\n          stmt.run(\r\n            \"불고기\",\r\n            \"정겨운 식당\",\r\n            13000,\r\n            7000,\r\n            \"1. 소고기 양념하기\\n2. 야채와 함께 볶기\\n3. 완성!\",\r\n            \"소고기, 양파, 당근, 대파, 마늘, 간장, 설탕\"\r\n          );\r\n\r\n          // 김밥\r\n          stmt.run(\r\n            \"김밥\",\r\n            \"분식집\",\r\n            5000,\r\n            3000,\r\n            \"1. 김밥 재료 준비\\n2. 밥과 재료를 김에 말기\\n3. 완성!\",\r\n            \"김, 밥, 단무지, 시금치, 당근, 햄, 계란\"\r\n          );\r\n          stmt.run(\r\n            \"김밥\",\r\n            \"맛있는 집\",\r\n            5500,\r\n            3000,\r\n            \"1. 김밥 재료 준비\\n2. 밥과 재료를 김에 말기\\n3. 완성!\",\r\n            \"김, 밥, 단무지, 시금치, 당근, 햄, 계란\"\r\n          );\r\n          stmt.run(\r\n            \"김밥\",\r\n            \"정겨운 식당\",\r\n            6000,\r\n            3000,\r\n            \"1. 김밥 재료 준비\\n2. 밥과 재료를 김에 말기\\n3. 완성!\",\r\n            \"김, 밥, 단무지, 시금치, 당근, 햄, 계란\"\r\n          );\r\n\r\n          // 잡채\r\n          stmt.run(\r\n            \"잡채\",\r\n            \"한식당\",\r\n            10000,\r\n            6000,\r\n            \"1. 당면 삶기\\n2. 고기와 야채 볶기\\n3. 당면과 함께 볶기\\n4. 완성!\",\r\n            \"당면, 소고기, 시금치, 당근, 양파, 대파, 간장, 설탕\"\r\n          );\r\n          stmt.run(\r\n            \"잡채\",\r\n            \"맛있는 집\",\r\n            10500,\r\n            6000,\r\n            \"1. 당면 삶기\\n2. 고기와 야채 볶기\\n3. 당면과 함께 볶기\\n4. 완성!\",\r\n            \"당면, 소고기, 시금치, 당근, 양파, 대파, 간장, 설탕\"\r\n          );\r\n          stmt.run(\r\n            \"잡채\",\r\n            \"정겨운 식당\",\r\n            11000,\r\n            6000,\r\n            \"1. 당면 삶기\\n2. 고기와 야채 볶기\\n3. 당면과 함께 볶기\\n4. 완성!\",\r\n            \"당면, 소고기, 시금치, 당근, 양파, 대파, 간장, 설탕\"\r\n          );\r\n\r\n          stmt.finalize();\r\n        }\r\n      });\r\n\r\n      db.get(\"SELECT COUNT(*) AS count FROM ingredients\", (err, row) => {\r\n        if (err) {\r\n          console.error(\"Error checking ingredients table\", err);\r\n        } else if (row.count === 0) {\r\n          const stmt = db.prepare(\r\n            \"INSERT INTO ingredients (name, price) VALUES (?, ?)\"\r\n          );\r\n          stmt.run(\"김치\", 2000);\r\n          stmt.run(\"돼지고기\", 3000);\r\n          stmt.run(\"두부\", 1000);\r\n          stmt.run(\"양파\", 500);\r\n          stmt.run(\"대파\", 500);\r\n          stmt.run(\"고춧가루\", 1000);\r\n          stmt.run(\"된장\", 1500);\r\n          stmt.run(\"애호박\", 1000);\r\n          stmt.run(\"고추\", 500);\r\n          stmt.run(\"밥\", 1000);\r\n          stmt.run(\"고추장\", 500);\r\n          stmt.run(\"소고기\", 4000);\r\n          stmt.run(\"시금치\", 500);\r\n          stmt.run(\"당근\", 300);\r\n          stmt.run(\"콩나물\", 300);\r\n          stmt.run(\"계란\", 500);\r\n          stmt.run(\"마늘\", 200);\r\n          stmt.run(\"간장\", 200);\r\n          stmt.run(\"설탕\", 100);\r\n          stmt.run(\"김\", 500);\r\n          stmt.run(\"단무지\", 300);\r\n          stmt.run(\"햄\", 500);\r\n          stmt.run(\"당면\", 1500);\r\n          stmt.finalize();\r\n        }\r\n      });\r\n    });\r\n  }\r\n});\r\n\r\n// API 엔드포인트\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Hello, world!\");\r\n});\r\n\r\n// 음식 검색 API\r\napp.get(\"/api/foods/:name\", (req, res) => {\r\n  const name = req.params.name;\r\n  db.all(\"SELECT * FROM foods WHERE name = ?\", [name], (err, rows) => {\r\n    if (err) {\r\n      res.status(500).send(\"Error fetching food\");\r\n    } else if (rows.length === 0) {\r\n      res.status(404).send(\"Food not found\");\r\n    } else {\r\n      res.send(rows);\r\n    }\r\n  });\r\n});\r\n\r\n// 재료 가격 API\r\napp.get(\"/api/ingredient-prices/:name\", (req, res) => {\r\n  const name = req.params.name;\r\n  db.get(\"SELECT ingredients FROM foods WHERE name = ?\", [name], (err, row) => {\r\n    if (err) {\r\n      res.status(500).send(\"Error fetching ingredients\");\r\n    } else if (!row) {\r\n      res.status(404).send(\"Food not found\");\r\n    } else {\r\n      const ingredients = row.ingredients.split(\", \");\r\n      const prices = {};\r\n      let totalCost = 0;\r\n\r\n      db.all(\r\n        \"SELECT name, price FROM ingredients WHERE name IN (\" +\r\n          ingredients.map(() => \"?\").join(\",\") +\r\n          \")\",\r\n        ingredients,\r\n        (err, rows) => {\r\n          if (err) {\r\n            res.status(500).send(\"Error fetching ingredient prices\");\r\n          } else {\r\n            rows.forEach((ingredient) => {\r\n              prices[ingredient.name] = ingredient.price;\r\n              totalCost += ingredient.price;\r\n            });\r\n            res.send({ prices, totalCost });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  });\r\n});\r\n\r\n// 냉장고 재료 API\r\napp.get(\"/api/ingredients\", (req, res) => {\r\n  db.all(\"SELECT * FROM ingredients ORDER BY name ASC\", [], (err, rows) => {\r\n    if (err) {\r\n      res.status(500).send(\"Error fetching ingredients\");\r\n    } else {\r\n      res.send(rows);\r\n    }\r\n  });\r\n});\r\n\r\napp.post(\"/api/ingredients\", (req, res) => {\r\n  const { name, price } = req.body;\r\n  db.run(\r\n    \"INSERT INTO ingredients (name, price) VALUES (?, ?)\",\r\n    [name, price],\r\n    function (err) {\r\n      if (err) {\r\n        res.status(500).send(\"Error adding ingredient\");\r\n      } else {\r\n        res.send({ id: this.lastID });\r\n      }\r\n    }\r\n  );\r\n});\r\n\r\n// 서버 시작\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}