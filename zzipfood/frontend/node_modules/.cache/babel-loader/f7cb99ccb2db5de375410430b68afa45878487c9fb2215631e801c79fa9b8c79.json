{"ast":null,"code":"const express = require(\"express\");\nconst sqlite3 = require(\"sqlite3\").verbose();\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst path = require(\"path\");\nconst app = express();\nconst port = 5000;\n\n// Middleware 설정\napp.use(cors());\napp.use(bodyParser.json());\n\n// SQLite 데이터베이스 파일 경로 설정\nconst dbPath = path.resolve(__dirname, \"zzipfood.db\");\n\n// SQLite 데이터베이스 연결\nconst db = new sqlite3.Database(dbPath, err => {\n  if (err) {\n    console.error(\"Database connection error:\", err.message);\n  } else {\n    console.log(\"Connected to the SQLite database\");\n    // 데이터베이스 초기화 및 데이터 삽입\n    db.serialize(() => {\n      db.run(\"DROP TABLE IF EXISTS foods\");\n      db.run(\"DROP TABLE IF EXISTS ingredients\");\n      db.run(`CREATE TABLE IF NOT EXISTS foods (\n        name TEXT,\n        restaurantName TEXT,\n        restaurantPrice INTEGER,\n        ingredientCost INTEGER,\n        recipe TEXT,\n        ingredients TEXT\n      )`);\n      db.run(`CREATE TABLE IF NOT EXISTS ingredients (\n        name TEXT,\n        price INTEGER,\n        expiryDate TEXT\n      )`);\n\n      // 초기 데이터 삽입\n      db.get(\"SELECT COUNT(*) AS count FROM foods\", (err, row) => {\n        if (err) {\n          console.error(\"Error checking foods table:\", err);\n        } else if (row.count === 0) {\n          const stmt = db.prepare(\"INSERT INTO foods (name, restaurantName, restaurantPrice, ingredientCost, recipe, ingredients) VALUES (?, ?, ?, ?, ?, ?)\");\n          stmt.run(\"김치찌개\", \"한식당\", 8000, 5000, \"1. 김치 준비\\n2. 돼지고기와 함께 끓이기\\n3. 완성!\", \"김치, 돼지고기, 두부, 양파, 대파, 고춧가루\");\n          stmt.run(\"된장찌개\", \"한식당\", 7000, 4000, \"1. 된장 준비\\n2. 야채와 함께 끓이기\\n3. 완성!\", \"된장, 두부, 애호박, 고추\");\n          stmt.run(\"비빔밥\", \"한식당\", 9000, 6000, \"1. 밥 준비\\n2. 야채와 고기와 함께 비비기\\n3. 고추장 넣기\\n4. 완성!\", \"밥, 고추장, 소고기, 시금치, 당근, 콩나물, 계란\");\n          stmt.run(\"불고기\", \"고기집\", 12000, 7000, \"1. 소고기 양념하기\\n2. 야채와 함께 볶기\\n3. 완성!\", \"소고기, 양파, 당근, 대파, 마늘, 간장, 설탕\");\n          stmt.run(\"김밥\", \"분식집\", 5000, 3000, \"1. 김밥 재료 준비\\n2. 밥과 재료를 김에 말기\\n3. 완성!\", \"김, 밥, 단무지, 시금치, 당근, 햄, 계란\");\n          stmt.run(\"잡채\", \"한식당\", 10000, 6000, \"1. 당면 삶기\\n2. 고기와 야채 볶기\\n3. 당면과 함께 볶기\\n4. 완성!\", \"당면, 소고기, 시금치, 당근, 양파, 대파, 간장, 설탕\");\n          stmt.finalize();\n        }\n      });\n      db.get(\"SELECT COUNT(*) AS count FROM ingredients\", (err, row) => {\n        if (err) {\n          console.error(\"Error checking ingredients table:\", err);\n        } else if (row.count === 0) {\n          const stmt = db.prepare(\"INSERT INTO ingredients (name, price, expiryDate) VALUES (?, ?, ?)\");\n          stmt.run(\"김치\", 2000, \"2024-12-01\");\n          stmt.run(\"돼지고기\", 3000, \"2024-12-05\");\n          stmt.run(\"두부\", 1000, \"2024-12-10\");\n          stmt.run(\"양파\", 500, \"2024-12-15\");\n          stmt.run(\"대파\", 500, \"2024-12-20\");\n          stmt.run(\"고춧가루\", 1000, \"2024-12-25\");\n          stmt.run(\"된장\", 1500, \"2024-12-30\");\n          stmt.run(\"애호박\", 1000, \"2025-01-01\");\n          stmt.run(\"고추\", 500, \"2025-01-05\");\n          stmt.run(\"밥\", 1000, \"2025-01-10\");\n          stmt.run(\"고추장\", 500, \"2025-01-15\");\n          stmt.run(\"소고기\", 4000, \"2025-01-20\");\n          stmt.run(\"시금치\", 1000, \"2025-01-25\");\n          stmt.run(\"당근\", 500, \"2025-01-30\");\n          stmt.run(\"콩나물\", 1000, \"2025-02-01\");\n          stmt.run(\"계란\", 300, \"2025-02-05\");\n          stmt.run(\"햄\", 1000, \"2025-02-10\");\n          stmt.run(\"마늘\", 500, \"2025-02-15\");\n          stmt.run(\"김\", 1000, \"2025-02-20\");\n          stmt.run(\"단무지\", 500, \"2025-02-25\");\n          stmt.run(\"설탕\", 500, \"2025-03-01\");\n          stmt.finalize();\n        }\n      });\n    });\n  }\n});\n\n// 음식 검색 API\napp.get(\"/api/foods/:name\", (req, res) => {\n  const name = req.params.name;\n  db.all(\"SELECT * FROM foods WHERE name = ?\", [name], (err, rows) => {\n    if (err) {\n      res.status(500).send(\"Error fetching food\");\n    } else if (rows.length === 0) {\n      res.status(404).send(\"Food not found\");\n    } else {\n      res.send(rows);\n    }\n  });\n});\n\n// 재료 가격 API\napp.get(\"/api/ingredient-prices/:name\", (req, res) => {\n  const name = req.params.name;\n  db.get(\"SELECT ingredients FROM foods WHERE name = ?\", [name], (err, row) => {\n    if (err) {\n      res.status(500).send(\"Error fetching ingredients\");\n    } else if (!row) {\n      res.status(404).send(\"Food not found\");\n    } else {\n      const ingredients = row.ingredients.split(\", \");\n      const prices = {};\n      let totalCost = 0;\n      db.all(\"SELECT name, price FROM ingredients WHERE name IN (\" + ingredients.map(() => \"?\").join(\",\") + \")\", ingredients, (err, rows) => {\n        if (err) {\n          res.status(500).send(\"Error fetching ingredient prices\");\n        } else {\n          rows.forEach(ingredient => {\n            prices[ingredient.name] = ingredient.price;\n            totalCost += ingredient.price;\n          });\n          res.send({\n            prices,\n            totalCost\n          });\n        }\n      });\n    }\n  });\n});\n\n// 냉장고 재료 리스트 가져오기\napp.get(\"/api/ingredients\", (req, res) => {\n  const sql = \"SELECT * FROM ingredients ORDER BY expiryDate\";\n  db.all(sql, [], (err, rows) => {\n    if (err) {\n      res.status(500).json({\n        error: err.message\n      });\n      return;\n    }\n    res.json(rows);\n  });\n});\n\n// 추천 요리 API\napp.get(\"/api/recommend-recipes\", (req, res) => {\n  db.all(\"SELECT * FROM foods\", [], (err, foodRows) => {\n    if (err) {\n      res.status(500).json({\n        error: err.message\n      });\n      return;\n    }\n    db.all(\"SELECT * FROM ingredients\", [], (err, ingredientRows) => {\n      if (err) {\n        res.status(500).json({\n          error: err.message\n        });\n        return;\n      }\n      const ingredients = ingredientRows.map(row => row.name);\n      const recommendations = foodRows.filter(food => {\n        const foodIngredients = food.ingredients.split(\", \");\n        return foodIngredients.every(ingredient => ingredients.includes(ingredient));\n      }).map(food => {\n        const foodIngredients = food.ingredients.split(\", \");\n        return {\n          name: food.name,\n          ingredients: foodIngredients\n        };\n      });\n      res.json(recommendations);\n    });\n  });\n});\n\n// 서버 시작\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","sqlite3","verbose","cors","bodyParser","path","app","port","use","json","dbPath","resolve","__dirname","db","Database","err","console","error","message","log","serialize","run","get","row","count","stmt","prepare","finalize","req","res","name","params","all","rows","status","send","length","ingredients","split","prices","totalCost","map","join","forEach","ingredient","price","sql","foodRows","ingredientRows","recommendations","filter","food","foodIngredients","every","includes","listen"],"sources":["C:/Users/csgae/Documents/GitHub/2024-01-CSC4004-03-Trogrammer/zzipfood/frontend/src/pages/FridgePage.js"],"sourcesContent":["const express = require(\"express\");\r\nconst sqlite3 = require(\"sqlite3\").verbose();\r\nconst cors = require(\"cors\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst path = require(\"path\");\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Middleware 설정\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// SQLite 데이터베이스 파일 경로 설정\r\nconst dbPath = path.resolve(__dirname, \"zzipfood.db\");\r\n\r\n// SQLite 데이터베이스 연결\r\nconst db = new sqlite3.Database(dbPath, (err) => {\r\n  if (err) {\r\n    console.error(\"Database connection error:\", err.message);\r\n  } else {\r\n    console.log(\"Connected to the SQLite database\");\r\n    // 데이터베이스 초기화 및 데이터 삽입\r\n    db.serialize(() => {\r\n      db.run(\"DROP TABLE IF EXISTS foods\");\r\n      db.run(\"DROP TABLE IF EXISTS ingredients\");\r\n\r\n      db.run(`CREATE TABLE IF NOT EXISTS foods (\r\n        name TEXT,\r\n        restaurantName TEXT,\r\n        restaurantPrice INTEGER,\r\n        ingredientCost INTEGER,\r\n        recipe TEXT,\r\n        ingredients TEXT\r\n      )`);\r\n\r\n      db.run(`CREATE TABLE IF NOT EXISTS ingredients (\r\n        name TEXT,\r\n        price INTEGER,\r\n        expiryDate TEXT\r\n      )`);\r\n\r\n      // 초기 데이터 삽입\r\n      db.get(\"SELECT COUNT(*) AS count FROM foods\", (err, row) => {\r\n        if (err) {\r\n          console.error(\"Error checking foods table:\", err);\r\n        } else if (row.count === 0) {\r\n          const stmt = db.prepare(\r\n            \"INSERT INTO foods (name, restaurantName, restaurantPrice, ingredientCost, recipe, ingredients) VALUES (?, ?, ?, ?, ?, ?)\"\r\n          );\r\n          stmt.run(\r\n            \"김치찌개\",\r\n            \"한식당\",\r\n            8000,\r\n            5000,\r\n            \"1. 김치 준비\\n2. 돼지고기와 함께 끓이기\\n3. 완성!\",\r\n            \"김치, 돼지고기, 두부, 양파, 대파, 고춧가루\"\r\n          );\r\n          stmt.run(\r\n            \"된장찌개\",\r\n            \"한식당\",\r\n            7000,\r\n            4000,\r\n            \"1. 된장 준비\\n2. 야채와 함께 끓이기\\n3. 완성!\",\r\n            \"된장, 두부, 애호박, 고추\"\r\n          );\r\n          stmt.run(\r\n            \"비빔밥\",\r\n            \"한식당\",\r\n            9000,\r\n            6000,\r\n            \"1. 밥 준비\\n2. 야채와 고기와 함께 비비기\\n3. 고추장 넣기\\n4. 완성!\",\r\n            \"밥, 고추장, 소고기, 시금치, 당근, 콩나물, 계란\"\r\n          );\r\n          stmt.run(\r\n            \"불고기\",\r\n            \"고기집\",\r\n            12000,\r\n            7000,\r\n            \"1. 소고기 양념하기\\n2. 야채와 함께 볶기\\n3. 완성!\",\r\n            \"소고기, 양파, 당근, 대파, 마늘, 간장, 설탕\"\r\n          );\r\n          stmt.run(\r\n            \"김밥\",\r\n            \"분식집\",\r\n            5000,\r\n            3000,\r\n            \"1. 김밥 재료 준비\\n2. 밥과 재료를 김에 말기\\n3. 완성!\",\r\n            \"김, 밥, 단무지, 시금치, 당근, 햄, 계란\"\r\n          );\r\n          stmt.run(\r\n            \"잡채\",\r\n            \"한식당\",\r\n            10000,\r\n            6000,\r\n            \"1. 당면 삶기\\n2. 고기와 야채 볶기\\n3. 당면과 함께 볶기\\n4. 완성!\",\r\n            \"당면, 소고기, 시금치, 당근, 양파, 대파, 간장, 설탕\"\r\n          );\r\n          stmt.finalize();\r\n        }\r\n      });\r\n\r\n      db.get(\"SELECT COUNT(*) AS count FROM ingredients\", (err, row) => {\r\n        if (err) {\r\n          console.error(\"Error checking ingredients table:\", err);\r\n        } else if (row.count === 0) {\r\n          const stmt = db.prepare(\r\n            \"INSERT INTO ingredients (name, price, expiryDate) VALUES (?, ?, ?)\"\r\n          );\r\n          stmt.run(\"김치\", 2000, \"2024-12-01\");\r\n          stmt.run(\"돼지고기\", 3000, \"2024-12-05\");\r\n          stmt.run(\"두부\", 1000, \"2024-12-10\");\r\n          stmt.run(\"양파\", 500, \"2024-12-15\");\r\n          stmt.run(\"대파\", 500, \"2024-12-20\");\r\n          stmt.run(\"고춧가루\", 1000, \"2024-12-25\");\r\n          stmt.run(\"된장\", 1500, \"2024-12-30\");\r\n          stmt.run(\"애호박\", 1000, \"2025-01-01\");\r\n          stmt.run(\"고추\", 500, \"2025-01-05\");\r\n          stmt.run(\"밥\", 1000, \"2025-01-10\");\r\n          stmt.run(\"고추장\", 500, \"2025-01-15\");\r\n          stmt.run(\"소고기\", 4000, \"2025-01-20\");\r\n          stmt.run(\"시금치\", 1000, \"2025-01-25\");\r\n          stmt.run(\"당근\", 500, \"2025-01-30\");\r\n          stmt.run(\"콩나물\", 1000, \"2025-02-01\");\r\n          stmt.run(\"계란\", 300, \"2025-02-05\");\r\n          stmt.run(\"햄\", 1000, \"2025-02-10\");\r\n          stmt.run(\"마늘\", 500, \"2025-02-15\");\r\n          stmt.run(\"김\", 1000, \"2025-02-20\");\r\n          stmt.run(\"단무지\", 500, \"2025-02-25\");\r\n          stmt.run(\"설탕\", 500, \"2025-03-01\");\r\n          stmt.finalize();\r\n        }\r\n      });\r\n    });\r\n  }\r\n});\r\n\r\n// 음식 검색 API\r\napp.get(\"/api/foods/:name\", (req, res) => {\r\n  const name = req.params.name;\r\n  db.all(\"SELECT * FROM foods WHERE name = ?\", [name], (err, rows) => {\r\n    if (err) {\r\n      res.status(500).send(\"Error fetching food\");\r\n    } else if (rows.length === 0) {\r\n      res.status(404).send(\"Food not found\");\r\n    } else {\r\n      res.send(rows);\r\n    }\r\n  });\r\n});\r\n\r\n// 재료 가격 API\r\napp.get(\"/api/ingredient-prices/:name\", (req, res) => {\r\n  const name = req.params.name;\r\n  db.get(\"SELECT ingredients FROM foods WHERE name = ?\", [name], (err, row) => {\r\n    if (err) {\r\n      res.status(500).send(\"Error fetching ingredients\");\r\n    } else if (!row) {\r\n      res.status(404).send(\"Food not found\");\r\n    } else {\r\n      const ingredients = row.ingredients.split(\", \");\r\n      const prices = {};\r\n      let totalCost = 0;\r\n\r\n      db.all(\r\n        \"SELECT name, price FROM ingredients WHERE name IN (\" +\r\n          ingredients.map(() => \"?\").join(\",\") +\r\n          \")\",\r\n        ingredients,\r\n        (err, rows) => {\r\n          if (err) {\r\n            res.status(500).send(\"Error fetching ingredient prices\");\r\n          } else {\r\n            rows.forEach((ingredient) => {\r\n              prices[ingredient.name] = ingredient.price;\r\n              totalCost += ingredient.price;\r\n            });\r\n            res.send({ prices, totalCost });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  });\r\n});\r\n\r\n// 냉장고 재료 리스트 가져오기\r\napp.get(\"/api/ingredients\", (req, res) => {\r\n  const sql = \"SELECT * FROM ingredients ORDER BY expiryDate\";\r\n  db.all(sql, [], (err, rows) => {\r\n    if (err) {\r\n      res.status(500).json({ error: err.message });\r\n      return;\r\n    }\r\n    res.json(rows);\r\n  });\r\n});\r\n\r\n// 추천 요리 API\r\napp.get(\"/api/recommend-recipes\", (req, res) => {\r\n  db.all(\"SELECT * FROM foods\", [], (err, foodRows) => {\r\n    if (err) {\r\n      res.status(500).json({ error: err.message });\r\n      return;\r\n    }\r\n    db.all(\"SELECT * FROM ingredients\", [], (err, ingredientRows) => {\r\n      if (err) {\r\n        res.status(500).json({ error: err.message });\r\n        return;\r\n      }\r\n\r\n      const ingredients = ingredientRows.map((row) => row.name);\r\n      const recommendations = foodRows\r\n        .filter((food) => {\r\n          const foodIngredients = food.ingredients.split(\", \");\r\n          return foodIngredients.every((ingredient) =>\r\n            ingredients.includes(ingredient)\r\n          );\r\n        })\r\n        .map((food) => {\r\n          const foodIngredients = food.ingredients.split(\", \");\r\n          return { name: food.name, ingredients: foodIngredients };\r\n        });\r\n\r\n      res.json(recommendations);\r\n    });\r\n  });\r\n});\r\n\r\n// 서버 시작\r\napp.listen(port, () => {\r\n  console.log(`Server is running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}